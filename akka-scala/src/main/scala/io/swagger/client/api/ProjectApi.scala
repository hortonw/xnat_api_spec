/**
 * /data to /xapi Refactoring
 * These API endpoints are refactored from XNAT's endpoints in [/data, /service, and /AjaxServlet]
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@xnat.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.JsonList
import io.swagger.client.model.JsonParam
import io.swagger.client.model.JsonParamList
import io.swagger.client.model.JsonPipeline
import io.swagger.client.model.JsonPipelineList
import io.swagger.client.model.JsonUser
import io.swagger.client.model.JsonUserList
import io.swagger.client.model.SimpleString
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object ProjectApi {

  /**
   * 
   * 
   * Expected answers:
   *   code 201 :  (item created)
   *   code 400 :  (invalid input, object invalid)
   *   code 409 :  (an existing item already exists)
   * 
   * @param xmlDefinition XML project definition
   */
  def addProject(xmlDefinition: Option[JsonList] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/xapi/projects", "application/xml")
      .withBody(xmlDefinition)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](409)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 :  (Pipeline added to project)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param pipeline Pipeline object
   */
  def addProjectPipeline(id: String, pipeline: JsonPipeline): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/xapi/projects/{id}/pipelines", "application/json")
      .withBody(pipeline)
      .withPathParam("id", id)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 :  (Pipeline config added to project)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param pipeline Pipeline Name
   * @param config Pipeline config object
   */
  def addProjectPipelineConfig(id: String, pipeline: String, config: JsonParam): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/xapi/projects/{id}/pipelines/{pipeline}/config", "application/json")
      .withBody(config)
      .withPathParam("id", id)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 : JsonUserList (User Created)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param user User object
   */
  def addProjectUser(id: String, user: JsonUser): ApiRequest[JsonUserList] =
    ApiRequest[JsonUserList](ApiMethods.POST, "https://localhost", "/xapi/projects/{id}/users", "application/json")
      .withBody(user)
      .withPathParam("id", id)
      .withSuccessResponse[JsonUserList](201)
      .withErrorResponse[Unit](403)
        /**
   * Adds a new individual project attribute
   * 
   * Expected answers:
   *   code 200 :  (Project Updated)
   *   code 504 :  (Permission Denied)
   * 
   * @param id Project Id
   * @param property The project config property to set
   * @param setting JSON definition
   */
  def createProjectSetting(id: String, property: String, setting: Option[SimpleString] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost", "/xapi/projects/{id}/config/{property}", "application/json")
      .withBody(setting)
      .withPathParam("id", id)
      .withPathParam("property", property)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](504)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Project user removed)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param username User to remove
   */
  def deleteProjectUser(id: String, username: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://localhost", "/xapi/projects/{id}/users/{username}", "application/json")
      .withPathParam("id", id)
      .withPathParam("username", username)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonParamList (search result matching criteria)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   */
  def getProjectConfigs(id: String): ApiRequest[JsonParamList] =
    ApiRequest[JsonParamList](ApiMethods.GET, "https://localhost", "/xapi/projects/{id}/config", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[JsonParamList](200)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonParam (Pipeline config for project)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param pipeline Pipeline Name
   */
  def getProjectPipelineConfig(id: String, pipeline: String): ApiRequest[JsonParam] =
    ApiRequest[JsonParam](ApiMethods.GET, "https://localhost", "/xapi/projects/{id}/pipelines/{pipeline}/config", "application/json")
      .withPathParam("id", id)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[JsonParam](200)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonPipelineList (All project pipelines)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   */
  def getProjectPipelines(id: String): ApiRequest[JsonPipelineList] =
    ApiRequest[JsonPipelineList](ApiMethods.GET, "https://localhost", "/xapi/projects/{id}/pipelines", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[JsonPipelineList](200)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonParam (search result matching criteria)
   *   code 504 :  (permission denied)
   * 
   * @param id Project Id
   * @param property The project config property to retrieve
   */
  def getProjectSetting(id: String, property: String): ApiRequest[JsonParam] =
    ApiRequest[JsonParam](ApiMethods.GET, "https://localhost", "/xapi/projects/{id}/config/{property}", "application/json")
      .withPathParam("id", id)
      .withPathParam("property", property)
      .withSuccessResponse[JsonParam](200)
      .withErrorResponse[Unit](504)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonUser (Project user with access role)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param username User to view
   */
  def getProjectUser(id: String, username: String): ApiRequest[JsonUser] =
    ApiRequest[JsonUser](ApiMethods.GET, "https://localhost", "/xapi/projects/{id}/users/{username}", "application/json")
      .withPathParam("id", id)
      .withPathParam("username", username)
      .withSuccessResponse[JsonUser](200)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonUserList (All project users)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param showDisabled Includes disabled users
   */
  def getProjectUsers(id: String, showDisabled: Option[Boolean] = None): ApiRequest[JsonUserList] =
    ApiRequest[JsonUserList](ApiMethods.GET, "https://localhost", "/xapi/projects/{id}/users", "application/json")
      .withQueryParam("showDisabled", showDisabled)
      .withPathParam("id", id)
      .withSuccessResponse[JsonUserList](200)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonList (search result matching criteria)
   *   code 504 :  (permission denied)
   * 
   * @param id Project Id
   */
  def listProject(id: String): ApiRequest[JsonList] =
    ApiRequest[JsonList](ApiMethods.GET, "https://localhost", "/xapi/projects/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[JsonList](200)
      .withErrorResponse[Unit](504)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonList (search results matching criteria)
   * 
   * @param format default: json
   * @param restrictTo user access level to restrict results to
   */
  def listProjects(format: Option[String] = None, restrictTo: Option[String] = None): ApiRequest[JsonList] =
    ApiRequest[JsonList](ApiMethods.GET, "https://localhost", "/xapi/projects", "application/json")
      .withQueryParam("format", format)
      .withQueryParam("restrictTo", restrictTo)
      .withSuccessResponse[JsonList](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Project Updated)
   *   code 504 :  (Permission Denied)
   * 
   * @param id Project Id
   * @param xmlDefinition XML project definition
   */
  def updateProject(id: String, xmlDefinition: Option[JsonList] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/xapi/projects/{id}", "application/json")
      .withBody(xmlDefinition)
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](504)
        /**
   * 
   * 
   * Expected answers:
   *   code 201 :  (Pipeline config updated for project)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param pipeline Pipeline Name
   * @param config Pipeline config object
   */
  def updateProjectPipelineConfig(id: String, pipeline: String, config: JsonParam): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/xapi/projects/{id}/pipelines/{pipeline}/config", "application/json")
      .withBody(config)
      .withPathParam("id", id)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[Unit](403)
        /**
   * replaces individual project attribute APIs
   * 
   * Expected answers:
   *   code 200 :  (Project Config Setting Updated)
   *   code 403 :  (Permission Denied)
   * 
   * @param id Project Id
   * @param property The project config property to set
   * @param setting JSON definition
   */
  def updateProjectSetting(id: String, property: String, setting: Option[JsonParam] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost", "/xapi/projects/{id}/config/{property}", "application/json")
      .withBody(setting)
      .withPathParam("id", id)
      .withPathParam("property", property)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : JsonUser (Project user with updated access role)
   *   code 403 :  (permission denied)
   * 
   * @param id Project Id
   * @param username User to update
   * @param role User role/group
   */
  def updateProjectUser(id: String, username: String, role: String): ApiRequest[JsonUser] =
    ApiRequest[JsonUser](ApiMethods.PUT, "https://localhost", "/xapi/projects/{id}/users/{username}", "application/json")
      .withQueryParam("role", role)
      .withPathParam("id", id)
      .withPathParam("username", username)
      .withSuccessResponse[JsonUser](200)
      .withErrorResponse[Unit](403)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  (Project Deleted)
   *   code 504 :  (Permission Denied)
   * 
   * @param id Project Id
   */
  def xapiProjectsIdDelete(id: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://localhost", "/xapi/projects/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](504)
      

}

